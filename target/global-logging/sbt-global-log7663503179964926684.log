[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\user\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\user\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 1.8.0_401)
[debug] Load.defaultLoad until apply took 80.7869ms
[debug]           Load.loadUnit: plugins took 76.4194ms
[debug]           Load.loadUnit: defsScala took 0.253ms
[debug] [Loading] Scanning directory C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy\project
[debug]             Load.loadUnit: mkEval took 7.5907ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.0916 ms
[info] loading settings for project finalprojectv2-kim-ohy-build from idea.sbt ...
[debug]               Load.resolveProject(finalprojectv2-kim-ohy-build) took 46.0521ms
[debug]             Load.loadTransitive: finalizeProject(Project(id finalprojectv2-kim-ohy-build, base: C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy\project, plugins: List(<none>))) took 67.9347ms
[debug] [Loading] Done in C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy\project, returning: (finalprojectv2-kim-ohy-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2043.0052ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.2604ms
[debug]         Load.loadUnit(file:/C:/Users/user/IdeaProjects/finalprojectv2-kim-ohy/project/, ...) took 2129.3582ms
[debug]       Load.apply: load took 2224.7132ms
[debug]       Load.apply: resolveProjects took 6.1949ms
[debug]       Load.apply: finalTransforms took 47.428ms
[debug]       Load.apply: config.delegates took 6.6561ms
[debug]       Load.apply: Def.make(settings)... took 301.559ms
[debug]       Load.apply: structureIndex took 78.2284ms
[debug]       Load.apply: mkStreams took 1.466ms
[info] loading project definition from C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3971.9551ms
[debug]     Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy
[debug]       Load.loadUnit: mkEval took 0.2126ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.0038 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 30.6448ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy, plugins: List(<none>))) took 35.1644ms
[debug] [Loading] Done in C:\Users\user\IdeaProjects\finalprojectv2-kim-ohy, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 881.7801ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.2794ms
[debug]   Load.loadUnit(file:/C:/Users/user/IdeaProjects/finalprojectv2-kim-ohy/, ...) took 4861.0217ms
[debug] Load.apply: load took 4878.0542ms
[debug] Load.apply: resolveProjects took 0.1351ms
[debug] Load.apply: finalTransforms took 21.5943ms
[debug] Load.apply: config.delegates took 0.2394ms
[debug] Load.apply: Def.make(settings)... took 59.8194ms
[debug] Load.apply: structureIndex took 18.737ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to scalaFXIntro (in build file:/C:/Users/user/IdeaProjects/finalprojectv2-kim-ohy/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56704 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56704, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by no settings or tasks.
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by no settings or tasks.
[info] Reapplying settings...
[info] set current project to scalaFXIntro (in build file:/C:/Users/user/IdeaProjects/finalprojectv2-kim-ohy/)
[debug] > Exec(idea-shell, None, None)
